---
import '~/styles/global.css'

interface Props {
	title: string;
	description: string;
	image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, image = '/blog-placeholder-1.jpg' } = Astro.props
const imageUrl = new URL(image, Astro.url)
---

<!-- 全局元信息 -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- 字体预加载 -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- 基本元信息(SEO) -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook / Github -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageUrl} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={imageUrl} />

<!-- 主题切换必须的脚本 -->
<script is:inline>
// 该脚本是内联中页面中的,不会被打包
// 从本地存储中获取主题
const theme = localStorage.getItem('theme')
const docEl = document.documentElement
// 如果没有主题,则设置为系统默认主题,否则为本地存储的主题
if (!theme) {
	const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
	docEl.setAttribute('data-theme',  systemTheme)
} else {
	docEl.setAttribute(
		'data-theme',
		theme
	)
}
</script>
<script>
import { themeChange } from 'theme-change'
// 主题切换
themeChange()
</script>